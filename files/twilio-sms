#!/usr/bin/perl

# Copyright (c) 2013, Brane F. Gracnar
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the <organization> nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE

use strict;
use warnings;

use bytes;
use JSON;
use HTTP::Request;
use LWP::UserAgent;
use File::Basename;
use Getopt::Long;
use POSIX qw(ceil);

use URI::Escape qw(uri_escape_utf8);
use MIME::Base64 qw(encode_base64);

#####################################################

my $cfg = {
  from          => undef,
  user_id       => undef,
  auth_token    => undef,
  timeout       => 5,
  split_big_msg => 0,
  deferred_dir  => "/tmp",
  defer_enabled => 1,
  max_tries     => 3,
  msg_rewrite   => 0,
};

#####################################################

use constant MSG_LEN_LIMIT => 160;
use constant TWILIO_URL    => 'https://api.twilio.com/2010-04-01/Accounts/%s/SMS/Messages.json';

my $MYNAME = basename($0);
my $VERSION = '0.22';
my $HOME = ((getpwuid($>))[7]);
my $verbose = 0;
my $debug = 0;
my $report = 0;
my $_rep = [];
my @recipients = ();

my $ua = undef;
my $jp = JSON->new->utf8(1)->pretty(1);
my @cfg_files = (
  "/etc/${MYNAME}.conf",
  "/etc/${MYNAME}/${MYNAME}.conf",
  "/usr/local/etc/${MYNAME}.conf",
  "/usr/local/etc/${MYNAME}/${MYNAME}.conf",
  "/etc/icinga/${MYNAME}.conf",
  "/etc/nagios/${MYNAME}.conf",
  "/etc/nagios3/${MYNAME}.conf",
  "/usr/local/etc/icinga/${MYNAME}.conf",
  "/usr/local/etc/nagios/${MYNAME}.conf",
  "/usr/local/etc/nagios3/${MYNAME}.conf",
  "$HOME/config/${MYNAME}/${MYNAME}.conf",
  "$HOME/config/${MYNAME}.conf",
  "$HOME/.config/${MYNAME}/${MYNAME}.conf",
  "$HOME/.config/${MYNAME}.conf",
  "$HOME/.${MYNAME}.conf",
);

sub ntfy_verbose {
  return unless $verbose;
  print STDERR "VERBOSE: ", join('', @_), "\n";
}

sub ntfy_debug {
  return unless $debug;
  print STDERR "DEBUG:   ", join('', @_), "\n";
}

sub ntfy_fatal {
  my $msg = join('', @_);
  $msg =~ s/\s+$//g;
  print STDERR $msg, "\n";
  my_exit(1);
}

sub my_exit {
  my $c = shift;
  report_status();
  exit $c;
}

sub report_status {
  return unless $report;
  print $jp->encode($_rep);
}

sub dmp {
  require Data::Dumper;
  my $d = Data::Dumper->new([ @_ ]);
  $d->Terse(1);
  $d->Indent(1);
  $d->Sortkeys(1);
  return $d->Dump();
}

sub file_write {
  my ($file, $buf) = @_;
  my $fh = undef;
  open($fh, '>', $file) || return undef;
  print $fh $buf;
  close($fh);
}

sub file_read {
  my ($file) = @_;
  my $buf = undef;
  my $fh = undef;
  open($fh, '<', $file) || return undef;
  read($fh, $buf, 1024 * 1024);
  close($fh);
  $buf;
}

sub save_deferred {
  my ($msg, $err) = @_;
  return 1 unless ($cfg->{defer_enabled});
  $msg->{tries}++;
  $msg->{err} = $err if (defined $err);
  my $f =
    $cfg->{deferred_dir} .
    '/.' .
    $> .
    '.' .
    $msg->{time} .
    '.' . $msg->{id} .
    '.deferred';
  file_write($f, $jp->encode($msg));
}


sub process_deffered {
  my $dh = undef;
  opendir($dh, $cfg->{deferred_dir}) || die "Unable to open directory $cfg->{deferred_dir}: $!\n";
  while (defined (my $e = readdir($dh))) {
    next if ($e eq '.' || $e eq '..');
    next unless ($e =~ m/^\.$>\..+\.deferred$/);
    my $f = $cfg->{deferred_dir} . '/' . $e;
    next unless (-f $f && -r $f);
    my $msg = eval { $jp->decode(file_read($f)) };
    unless (defined $msg) {
      unlink($f);
      next;
    }

    # too many sending attempts?
    if ($cfg->{max_tries} && $msg->{tries} > $cfg->{max_tries}) {
      unlink($f);
      next;
    }

    # try to-resend
    eval { msg_send_real($msg); unlink($f) };

    # resend failed?! defer it again!
    save_deferred($msg, $@) if ($@);
  }
  closedir($dh);
}

sub config_read_all {
  map { eval { config_read($_) } } @cfg_files;
}

sub config_read {
  my ($file) = @_;
  my $buf = file_read($file);
  die "Unable to open file $file: $!\n" unless (defined $buf);
  foreach my $l (split(/[\r\n]+/, $buf)) {
    $l =~ s/^\s*//g;
    $l =~ s/\s*$//g;
    $l =~ s/^(.+)#.*/$1/g;
    next unless (length $l);
    my ($k, $v) = split(/\s*[=:]+\s*/, $l, 2);
    next unless (defined $k && length $k && defined $v);
    $v =~ s/^["']+//g;
    $v =~ s/["']+$//g;
    next unless (length $v);
    $cfg->{$k} = $v if (exists($cfg->{$k}));
  }
  return 1;
}

sub config_default {
  my $buf = dmp($cfg);
  $buf =~ s/[{}'",]+//gm;
  $buf =~ s/=>/=/gm;
  $buf =~ s/  //gm;
  return "#\n# $MYNAME configuration\n#\n" .$buf . "# EOF\n";
}

sub config_validate {
  my $msg = undef;

  for (qw(from user_id auth_token)) {
    unless (defined $cfg->{$_} && length($cfg->{$_})) {
      $msg = "Key $_ is not defined.";
      last;
    }
  }

  die "BAD CONFIGURATION: $msg\n" if ($msg);
}

sub ua_get {
  unless (defined $ua) {
    $ua = LWP::UserAgent->new();
    $ua->env_proxy();
    $ua->timeout($cfg->{timeout});
    my $cc = eval {
      require LWP::ConnCache;
      LWP::ConnCache->new(total_capacity => 100);
    };
    $ua->conn_cache($cc) if (defined $cc);
  }
  $ua;
}

sub msg_id {
  return uc(sprintf("%x", rand(2 ** 32)));
}

sub msg_send_real {
  my ($msg) = @_;
  local $@;

  my $url = sprintf(TWILIO_URL, uri_escape_utf8($msg->{user_id}));
  my $req = HTTP::Request->new(POST => $url);
  $req->header(
    'Authorization',
    'Basic ' . encode_base64($msg->{user_id} . ':' . $msg->{auth_token}, '')
  );
  $req->header('Content-Type', 'application/x-www-form-urlencoded');

  my $body = 'From=' . uri_escape_utf8($msg->{from}) . "&";
  $body .= 'To=' . uri_escape_utf8($msg->{recipient}) . "&";
  $body .= 'Body=' . uri_escape_utf8($msg->{msg});

  $req->header('Content-Length', length($body));
  $req->add_content($body);

  # fire the goddamn request!
  my $ua = ua_get();
  ntfy_debug("Sending request: " . $req->as_string);
  my $r = $ua->request($req);
  ntfy_verbose("HTTP status: " . $r->status_line);
  ntfy_debug("Returned response: " . $r->as_string) if ($debug);
  unless ($r->is_success) {
    my $j = eval { $jp->decode($r->decoded_content) };
    my $reason = (defined $j) ? $j->{message} : undef;
    push(@{$_rep}, $j) if (defined $j);
    my $e = "HTTP request failed: " . $r->status_line;
    $e .= "; reason: $reason" if (defined $reason);
    die "$e\n";
  }

  my $j = eval { $jp->decode($r->decoded_content) };
  die "Error decoding JSON response: $@\n" if ($@);
  push(@{$_rep}, $j);

  ntfy_debug("Returned JSON: " . dmp($j)) if ($debug);
  die "API response: Message wasn't queued: $j->{status}\n" unless ($j->{status} eq 'queued');

  return 1;
}

sub msg_split {
  my ($str) = @_;
  my @r = ();
  my $l = length($str);
  if ($l > MSG_LEN_LIMIT) {
    if ($cfg->{split_big_msg}) {
      my $len = MSG_LEN_LIMIT - 5;
      my $max = ceil($l / $len);
      die "Message too long: $l bytes.\n" if ($max > 9);
      for (my $i = 1; $i <= $max; $i++) {
        push(@r, "$i/$max: " . substr($str, ($i - 1) * $len, $len));
      }
    } else {
      push(@r, substr($str, 0, MSG_LEN_LIMIT));
    }
  } else {
    @r = ($str);
  }

  return @r;
}

sub msg_prepare {
  my $msg = shift;
  my @res = ();
  foreach my $recip (@_) {
    map {
      push(@res, {
        id        => msg_id(),
        msg       => $_,
        recipient => $recip,
        time      => time(),
        from      => $cfg->{from},
        user_id   => $cfg->{user_id},
        auth_token=> $cfg->{auth_token},
        tries     => 0,
      });
    } msg_split($msg);
  }

  return @res;
}

sub msg_send {
  my ($m, $recip) = @_;
  $recip = '+' . $recip unless ($recip =~ m/^\+/);

  my $i = 0;
  my $ok = 1;
  my $err = '';
  foreach my $msg (msg_prepare($m, $recip)) {
    $i++;
    # try to send
    eval { msg_send_real($msg) };

    # defer if failed
    if ($@) {
      save_deferred($msg, $@);
      $ok = 0;
      $err .= "MSG $i: " . $@;
    }
  }

  ntfy_fatal($err) unless ($ok);
}

sub recipients_read {
  my ($file, $ref) = @_;
  my $buf = file_read($file);
  unless (defined $buf && length($buf))  {
    die "No recipients can't be read from recipients file $file: $!\n"
  }

  foreach my $l (split(/[\r\n]+/, $buf)) {
    $l =~ s/^\s+//g;
    ($l, undef) = split(/\s*#\s*/, $l);
    $l =~ s/\s+$//g;
    next unless (length($l));
    push(@{$ref}, $l);
  }
}

sub msg_rewrite {
  return $_[0] unless ($cfg->{msg_rewrite});
  no warnings;
  my $s = $_[0];
  $s =~ s/(?<!\\)\$\{?([\w]+)\}?/$ENV{$1}/gm;
  $s =~ s/\\\$/\$/gm;
  if ($debug && $s ne $_[0]) {
    ntfy_debug("Original message:  $_[0]");
    ntfy_debug("Rewritten message: $s");
  }
  $s;
}

sub printhelp {
  no warnings;
  print <<EOF;
Usage: $MYNAME [OPTIONS] [-- <recipient> [<recipient> ...]]

This script is simple command line interface to
Twilio (http://www.twilio.com/) SMS service.

OPTIONS:
      --default-config     Prints out default configuration file
  -c  --config=FILE        Read configuration from specified
                           file. NOTE Script tries to read
                           the following files on startup:

EOF
  map { print "                           $_\n"; } @cfg_files;
print <<EOF;

  -m  --msg=MSG            Message text
  -M  --msg-file=FILE      Read message text from specified file
                           NOTE: message is read from stdin if -m/-M
                           parameters are omitted.

      --rewrite            Rewrite variables in message with environmental
                           variable values (shell style)

  -R  --recipients=FILE    Read specified file containing recipient numbers
                           (one phone number per line, # comments supported)

  -f  --from=NUM           Sender number (Default: $cfg->{from})

  -P  --process            Process deferred messages
  -t  --timeout=SECS       HTTP request timeout in seconds (Default: $cfg->{timeout})

  -r  --report             Report response statuses
  -v  --verbose            Verbose execution
  -D  --debug              Enable script debugging.
  -V  --version            Prints script version
  -h  --help               This help message

EXAMPLES:

  # send file contents over SMS
  cat /path/to/file | $MYNAME -- +1987654321 +145678923
  $MYNAME -M /path/to/file -- +1987654321 +145678923

  # send simple string
  $MYNAME -m 'Hello world from \$USER'  -- +1987654321
  $MYNAME -m 'Hello world from \$USER' --rewrite  -- +1987654321
  $MYNAME -m 'Hello world from \\\$USER' --rewrite  -- +1987654321

  echo 'Hello world from \$USER' | $MYNAME  -- +1987654321
  echo 'Hello world from \$USER' | $MYNAME --rewrite  -- +1987654321
  echo 'Hello world from \\\$USER' | $MYNAME --rewrite  -- +1987654321

  # process deferred messages (usually from cron)
  $MYNAME -P

EOF
}

#####################################################

my $msg = undef;

config_read_all();

Getopt::Long::Configure('bundling', 'gnu_compat');
my $g = GetOptions(
  'c|config=s'          => sub { config_read($_[1]) },
  'default-config'      => sub { print config_default(); exit 0 },
  'P|process'           => sub { process_deffered(); exit 0 },
  'f|from=s'            => \$cfg->{from},
  'm|msg=s'             => \$msg,
  'M|msg-file=s'        => sub {
    no warnings;
    die "Bad message file '$_[1]'\n" unless (defined $_[1] && length($_[1]) && -f $_[1]);
    $msg = file_read($_[1]);
    die "Error reading message file $_[1]: $!\n" unless (defined $msg && length($msg));
  },
  'rewrite!'            => \$cfg->{msg_rewrite},
  'R|recipients=s'      => sub { recipients_read($_[1], \@recipients) },
  't|timeout=i'         => \$cfg->{timeout},
  'r|report'            => \$report,
  'v|verbose!'          => \$verbose,
  'D|debug'             => \$debug,
  'V|version'           => sub { print "$MYNAME $VERSION\n"; exit 0 },
  'h|help'              => sub { printhelp(), exit 0 },
);

unless ($g) {
  die "Invalid command line options, run $MYNAME --help for instructions.\n";
}

config_validate();

# no recipients?
push(@recipients, @ARGV);
die "No recipients specified! Run $MYNAME --help for instructions.\n" unless (@recipients);

# no message? read it from stdin.
unless (defined $msg) {
  ntfy_verbose("No message specified from command line, reading stdin.");
  $msg = '';
  while (<STDIN>) { $msg .= $_ }
}

$msg = msg_rewrite($msg);

map { msg_send($msg, $_) } @recipients;
my_exit(0);

# vim:shiftwidth=2 softtabstop=2 expandtab
# EOF
